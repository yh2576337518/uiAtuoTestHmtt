{"name": "test_mis_audit", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\n  (Session info: chrome=89.0.4389.90)\nStacktrace:\n0   chromedriver                        0x0000000103e35909 chromedriver + 2533641\n1   chromedriver                        0x00000001044bfd53 chromedriver + 9391443\n2   chromedriver                        0x0000000103bf33c3 chromedriver + 164803\n3   chromedriver                        0x0000000103be4605 chromedriver + 103941\n4   chromedriver                        0x0000000103be5662 chromedriver + 108130\n5   chromedriver                        0x0000000103bdf2b0 chromedriver + 82608\n6   chromedriver                        0x0000000103bf49b3 chromedriver + 170419\n7   chromedriver                        0x0000000103c4d6e8 chromedriver + 534248\n8   chromedriver                        0x0000000103c3f043 chromedriver + 475203\n9   chromedriver                        0x0000000103c19616 chromedriver + 321046\n10  chromedriver                        0x0000000103c1a587 chromedriver + 324999\n11  chromedriver                        0x0000000103e047f9 chromedriver + 2332665\n12  chromedriver                        0x0000000103e11963 chromedriver + 2386275\n13  chromedriver                        0x0000000103e1145b chromedriver + 2384987\n14  chromedriver                        0x0000000103deb5b5 chromedriver + 2229685\n15  chromedriver                        0x0000000103e123bf chromedriver + 2388927\n16  chromedriver                        0x0000000103df9c79 chromedriver + 2288761\n17  chromedriver                        0x0000000103e28f69 chromedriver + 2482025\n18  chromedriver                        0x0000000103e3b103 chromedriver + 2556163\n19  libsystem_pthread.dylib             0x00007fff20560950 _pthread_start + 224\n20  libsystem_pthread.dylib             0x00007fff2055c47b thread_start + 15", "trace": "self = <scripts.test04_mis_audit.TestMisAudit object at 0x10e3a9790>, title = 'test001-bj001'\nchannel = '数据库'\n\n    def test_mis_audit(self, title=page.title, channel=page.channel):\n        # 调用审核文章业务测试方法\n>       self.audit.page_mis_audit(title, channel)\n\nscripts/test04_mis_audit.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage/page_mis_audit.py:71: in page_mis_audit\n    self.article_id = self.page_get_article_id()\npage/page_mis_audit.py:49: in page_get_article_id\n    return self.base_get_text(page.mis_article_id)\nbase/base.py:66: in base_get_text\n    log.info(\"正在对：{} 元素获取文本，获取的文本值为：{}\".format(loc, self.base_find(loc).text))\nbase/base.py:27: in base_find\n    return WebDriverWait(self.driver, timeout=timeout, poll_frequency=poll).until(\n../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/support/wait.py:78: in until\n    value = method(self._driver)\nbase/base.py:28: in <lambda>\n    lambda x: x.find_element(*loc))\n../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:1122: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:369: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e3a9370>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: window was already closed\\\\n  ...fff20560950 _pthread_start + 224\\\\n20  libsystem_pthread.dylib             0x00007fff2055c47b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\nE         (Session info: chrome=89.0.4389.90)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103e35909 chromedriver + 2533641\nE       1   chromedriver                        0x00000001044bfd53 chromedriver + 9391443\nE       2   chromedriver                        0x0000000103bf33c3 chromedriver + 164803\nE       3   chromedriver                        0x0000000103be4605 chromedriver + 103941\nE       4   chromedriver                        0x0000000103be5662 chromedriver + 108130\nE       5   chromedriver                        0x0000000103bdf2b0 chromedriver + 82608\nE       6   chromedriver                        0x0000000103bf49b3 chromedriver + 170419\nE       7   chromedriver                        0x0000000103c4d6e8 chromedriver + 534248\nE       8   chromedriver                        0x0000000103c3f043 chromedriver + 475203\nE       9   chromedriver                        0x0000000103c19616 chromedriver + 321046\nE       10  chromedriver                        0x0000000103c1a587 chromedriver + 324999\nE       11  chromedriver                        0x0000000103e047f9 chromedriver + 2332665\nE       12  chromedriver                        0x0000000103e11963 chromedriver + 2386275\nE       13  chromedriver                        0x0000000103e1145b chromedriver + 2384987\nE       14  chromedriver                        0x0000000103deb5b5 chromedriver + 2229685\nE       15  chromedriver                        0x0000000103e123bf chromedriver + 2388927\nE       16  chromedriver                        0x0000000103df9c79 chromedriver + 2288761\nE       17  chromedriver                        0x0000000103e28f69 chromedriver + 2482025\nE       18  chromedriver                        0x0000000103e3b103 chromedriver + 2556163\nE       19  libsystem_pthread.dylib             0x00007fff20560950 _pthread_start + 224\nE       20  libsystem_pthread.dylib             0x00007fff2055c47b thread_start + 15\n\n../../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:236: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "c71982e7-a1e6-4ef7-8240-bfeb29b265b7-attachment.txt", "type": "text/plain"}], "start": 1616324198209, "stop": 1616324223190, "uuid": "85f78bfe-34de-4f87-8583-c1328b51e147", "historyId": "9882f7a913a37e1c698f7c88bfc6c7ef", "testCaseId": "a9c2bf081396218a64bd35d9487692ca", "fullName": "scripts.test04_mis_audit.TestMisAudit#test_mis_audit", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test04_mis_audit"}, {"name": "subSuite", "value": "TestMisAudit"}, {"name": "host", "value": "bogon"}, {"name": "thread", "value": "6666-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test04_mis_audit"}]}